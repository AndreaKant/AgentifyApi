version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: agent_db
    environment:
      - POSTGRES_DB=agent_db
      - POSTGRES_USER=agent_user
      - POSTGRES_PASSWORD=agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks: # <-- AGGIUNTO
      - agent_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80" # Accedi a pgAdmin da http://localhost:5050
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Rende persistenti le configurazioni
    networks:
      - agent_net
    depends_on:
      - db

  grpc_server:
    build:
      context: ./servers
      dockerfile: grpc.Dockerfile
    container_name: grpc_server
    ports:
      - "50051:50051"
    networks: # <-- AGGIUNTO
      - agent_net

  graphql_server:
    build:
      context: ./servers
      dockerfile: graphql.Dockerfile
    container_name: graphql_server
    ports:
      - "8000:8000"
    networks: # <-- AGGIUNTO
      - agent_net

  rest_server:
    build:
      context: ./servers
      dockerfile: rest.Dockerfile
    container_name: rest_server
    ports:
      - "8001:8001"
    networks: # <-- AGGIUNTO
      - agent_net

  geo_server:
    build:
      context: ./servers
      dockerfile: geo.Dockerfile
    container_name: geo_server
    ports:
      - "8002:8002"
    networks: # <-- AGGIUNTO
      - agent_net

  reviews_server:
    build:
      context: ./servers
      dockerfile: reviews.Dockerfile
    container_name: reviews_server
    ports:
      - "8003:8003"
    networks: # <-- AGGIUNTO
      - agent_net

  grpc_parser:
    build: ./grpc_parser
    container_name: grpc_parser
    command: > 
      sh -c "npm install -g nodemon && 
           nodemon --legacy-watch index.js"
    ports:
      - "3000:3000"
    networks:
      - agent_net
    volumes:
      - ./grpc_parser:/usr/src/app
      - /usr/src/app/node_modules

  indexer:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: indexer
    working_dir: /app
    command: python -m indexer.main
    volumes:
      - .:/app
    depends_on:
      - db
      - rest_server
      - grpc_parser
    environment:
      - PYTHONUNBUFFERED=1
      - DB_NAME=agent_db
      - DB_USER=agent_user
      - DB_PASSWORD=agent_password
      - DB_HOST=db
      - DB_PORT=5432
      - GRPC_PARSER_URL=http://grpc_parser:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REST_SERVER_PORT=8001
    networks: # <-- AGGIUNTO
      - agent_net

  agent:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: agent
    command: tail -f /dev/null
    tty: true
    volumes:
      - .:/app
    depends_on:
      - db
      - grpc_server
      - graphql_server
      - rest_server
    environment:
      - PYTHONUNBUFFERED=1
      - DB_NAME=agent_db
      - DB_USER=agent_user
      - DB_PASSWORD=agent_password
      - DB_HOST=db
      - DB_PORT=5432
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks: # <-- AGGIUNTO
      - agent_net

  llm_gateway:
    build: ./llm_gateway
    container_name: llm_gateway
    ports:
      - "3001:3001"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - agent_net

volumes:
  postgres_data:
  pgadmin_data:

# Definiamo la nostra rete custom
networks:
  agent_net:
    driver: bridge